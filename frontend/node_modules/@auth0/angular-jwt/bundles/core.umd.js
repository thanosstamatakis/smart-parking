!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("@angular/core"),require("@angular/common/http"),require("rxjs/operators"),require("rxjs/internal/observable/from")):"function"==typeof define&&define.amd?define(["@angular/core","@angular/common/http","rxjs/operators","rxjs/internal/observable/from"],e):"object"==typeof exports?exports["angular-jwt"]=e(require("@angular/core"),require("@angular/common/http"),require("rxjs/operators"),require("rxjs/internal/observable/from")):t["angular-jwt"]=e(t["@angular/core"],t["@angular/common/http"],t["rxjs/operators"],t["rxjs/internal/observable/from"])}("undefined"!=typeof self?self:this,function(t,e,r,n){return function(t){var e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:n})},r.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="/",r(r.s=5)}([function(e,r){e.exports=t},function(t,r){t.exports=e},function(t,e,r){"use strict";var n=r(12),o=r(9);function s(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}e.parse=g,e.resolve=function(t,e){return g(t,!1,!0).resolve(e)},e.resolveObject=function(t,e){return t?g(t,!1,!0).resolveObject(e):e},e.format=function(t){o.isString(t)&&(t=g(t));return t instanceof s?t.format():s.prototype.format.call(t)},e.Url=s;var i=/^([a-z0-9.+-]+:)/i,a=/:[0-9]*$/,h=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,c=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),u=["'"].concat(c),l=["%","/","?",";","#"].concat(u),f=["/","?","#"],p=/^[+a-z0-9A-Z_-]{0,63}$/,d=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,m={javascript:!0,"javascript:":!0},v={javascript:!0,"javascript:":!0},y={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0},b=r(8);function g(t,e,r){if(t&&o.isObject(t)&&t instanceof s)return t;var n=new s;return n.parse(t,e,r),n}s.prototype.parse=function(t,e,r){if(!o.isString(t))throw new TypeError("Parameter 'url' must be a string, not "+typeof t);var s=t.indexOf("?"),a=-1!==s&&s<t.indexOf("#")?"?":"#",c=t.split(a);c[0]=c[0].replace(/\\/g,"/");var g=t=c.join(a);if(g=g.trim(),!r&&1===t.split("#").length){var j=h.exec(g);if(j)return this.path=g,this.href=g,this.pathname=j[1],j[2]?(this.search=j[2],this.query=e?b.parse(this.search.substr(1)):this.search.substr(1)):e&&(this.search="",this.query={}),this}var O=i.exec(g);if(O){var x=(O=O[0]).toLowerCase();this.protocol=x,g=g.substr(O.length)}if(r||O||g.match(/^\/\/[^@\/]+@[^@\/]+/)){var w="//"===g.substr(0,2);!w||O&&v[O]||(g=g.substr(2),this.slashes=!0)}if(!v[O]&&(w||O&&!y[O])){for(var k,R,I=-1,C=0;C<f.length;C++){-1!==(A=g.indexOf(f[C]))&&(-1===I||A<I)&&(I=A)}-1!==(R=-1===I?g.lastIndexOf("@"):g.lastIndexOf("@",I))&&(k=g.slice(0,R),g=g.slice(R+1),this.auth=decodeURIComponent(k)),I=-1;for(C=0;C<l.length;C++){var A;-1!==(A=g.indexOf(l[C]))&&(-1===I||A<I)&&(I=A)}-1===I&&(I=g.length),this.host=g.slice(0,I),g=g.slice(I),this.parseHost(),this.hostname=this.hostname||"";var q="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!q)for(var E=this.hostname.split(/\./),S=(C=0,E.length);C<S;C++){var T=E[C];if(T&&!T.match(p)){for(var P="",U=0,N=T.length;U<N;U++)T.charCodeAt(U)>127?P+="x":P+=T[U];if(!P.match(p)){var D=E.slice(0,C),G=E.slice(C+1),W=T.match(d);W&&(D.push(W[1]),G.unshift(W[2])),G.length&&(g="/"+G.join(".")+g),this.hostname=D.join(".");break}}}this.hostname.length>255?this.hostname="":this.hostname=this.hostname.toLowerCase(),q||(this.hostname=n.toASCII(this.hostname));var _=this.port?":"+this.port:"",J=this.hostname||"";this.host=J+_,this.href+=this.host,q&&(this.hostname=this.hostname.substr(1,this.hostname.length-2),"/"!==g[0]&&(g="/"+g))}if(!m[x])for(C=0,S=u.length;C<S;C++){var M=u[C];if(-1!==g.indexOf(M)){var H=encodeURIComponent(M);H===M&&(H=escape(M)),g=g.split(M).join(H)}}var F=g.indexOf("#");-1!==F&&(this.hash=g.substr(F),g=g.slice(0,F));var B=g.indexOf("?");if(-1!==B?(this.search=g.substr(B),this.query=g.substr(B+1),e&&(this.query=b.parse(this.query)),g=g.slice(0,B)):e&&(this.search="",this.query={}),g&&(this.pathname=g),y[x]&&this.hostname&&!this.pathname&&(this.pathname="/"),this.pathname||this.search){_=this.pathname||"";var z=this.search||"";this.path=_+z}return this.href=this.format(),this},s.prototype.format=function(){var t=this.auth||"";t&&(t=(t=encodeURIComponent(t)).replace(/%3A/i,":"),t+="@");var e=this.protocol||"",r=this.pathname||"",n=this.hash||"",s=!1,i="";this.host?s=t+this.host:this.hostname&&(s=t+(-1===this.hostname.indexOf(":")?this.hostname:"["+this.hostname+"]"),this.port&&(s+=":"+this.port)),this.query&&o.isObject(this.query)&&Object.keys(this.query).length&&(i=b.stringify(this.query));var a=this.search||i&&"?"+i||"";return e&&":"!==e.substr(-1)&&(e+=":"),this.slashes||(!e||y[e])&&!1!==s?(s="//"+(s||""),r&&"/"!==r.charAt(0)&&(r="/"+r)):s||(s=""),n&&"#"!==n.charAt(0)&&(n="#"+n),a&&"?"!==a.charAt(0)&&(a="?"+a),e+s+(r=r.replace(/[?#]/g,function(t){return encodeURIComponent(t)}))+(a=a.replace("#","%23"))+n},s.prototype.resolve=function(t){return this.resolveObject(g(t,!1,!0)).format()},s.prototype.resolveObject=function(t){if(o.isString(t)){var e=new s;e.parse(t,!1,!0),t=e}for(var r=new s,n=Object.keys(this),i=0;i<n.length;i++){var a=n[i];r[a]=this[a]}if(r.hash=t.hash,""===t.href)return r.href=r.format(),r;if(t.slashes&&!t.protocol){for(var h=Object.keys(t),c=0;c<h.length;c++){var u=h[c];"protocol"!==u&&(r[u]=t[u])}return y[r.protocol]&&r.hostname&&!r.pathname&&(r.path=r.pathname="/"),r.href=r.format(),r}if(t.protocol&&t.protocol!==r.protocol){if(!y[t.protocol]){for(var l=Object.keys(t),f=0;f<l.length;f++){var p=l[f];r[p]=t[p]}return r.href=r.format(),r}if(r.protocol=t.protocol,t.host||v[t.protocol])r.pathname=t.pathname;else{for(var d=(t.pathname||"").split("/");d.length&&!(t.host=d.shift()););t.host||(t.host=""),t.hostname||(t.hostname=""),""!==d[0]&&d.unshift(""),d.length<2&&d.unshift(""),r.pathname=d.join("/")}if(r.search=t.search,r.query=t.query,r.host=t.host||"",r.auth=t.auth,r.hostname=t.hostname||t.host,r.port=t.port,r.pathname||r.search){var m=r.pathname||"",b=r.search||"";r.path=m+b}return r.slashes=r.slashes||t.slashes,r.href=r.format(),r}var g=r.pathname&&"/"===r.pathname.charAt(0),j=t.host||t.pathname&&"/"===t.pathname.charAt(0),O=j||g||r.host&&t.pathname,x=O,w=r.pathname&&r.pathname.split("/")||[],k=(d=t.pathname&&t.pathname.split("/")||[],r.protocol&&!y[r.protocol]);if(k&&(r.hostname="",r.port=null,r.host&&(""===w[0]?w[0]=r.host:w.unshift(r.host)),r.host="",t.protocol&&(t.hostname=null,t.port=null,t.host&&(""===d[0]?d[0]=t.host:d.unshift(t.host)),t.host=null),O=O&&(""===d[0]||""===w[0])),j)r.host=t.host||""===t.host?t.host:r.host,r.hostname=t.hostname||""===t.hostname?t.hostname:r.hostname,r.search=t.search,r.query=t.query,w=d;else if(d.length)w||(w=[]),w.pop(),w=w.concat(d),r.search=t.search,r.query=t.query;else if(!o.isNullOrUndefined(t.search)){if(k)r.hostname=r.host=w.shift(),(q=!!(r.host&&r.host.indexOf("@")>0)&&r.host.split("@"))&&(r.auth=q.shift(),r.host=r.hostname=q.shift());return r.search=t.search,r.query=t.query,o.isNull(r.pathname)&&o.isNull(r.search)||(r.path=(r.pathname?r.pathname:"")+(r.search?r.search:"")),r.href=r.format(),r}if(!w.length)return r.pathname=null,r.search?r.path="/"+r.search:r.path=null,r.href=r.format(),r;for(var R=w.slice(-1)[0],I=(r.host||t.host||w.length>1)&&("."===R||".."===R)||""===R,C=0,A=w.length;A>=0;A--)"."===(R=w[A])?w.splice(A,1):".."===R?(w.splice(A,1),C++):C&&(w.splice(A,1),C--);if(!O&&!x)for(;C--;C)w.unshift("..");!O||""===w[0]||w[0]&&"/"===w[0].charAt(0)||w.unshift(""),I&&"/"!==w.join("/").substr(-1)&&w.push("");var q,E=""===w[0]||w[0]&&"/"===w[0].charAt(0);k&&(r.hostname=r.host=E?"":w.length?w.shift():"",(q=!!(r.host&&r.host.indexOf("@")>0)&&r.host.split("@"))&&(r.auth=q.shift(),r.host=r.hostname=q.shift()));return(O=O||r.host&&w.length)&&!E&&w.unshift(""),w.length?r.pathname=w.join("/"):(r.pathname=null,r.path=null),o.isNull(r.pathname)&&o.isNull(r.search)||(r.path=(r.pathname?r.pathname:"")+(r.search?r.search:"")),r.auth=t.auth||r.auth,r.slashes=r.slashes||t.slashes,r.href=r.format(),r},s.prototype.parseHost=function(){var t=this.host,e=a.exec(t);e&&(":"!==(e=e[0])&&(this.port=e.substr(1)),t=t.substr(0,t.length-e.length)),t&&(this.hostname=t)}},function(t,e){t.exports=r},function(t,e){t.exports=n},function(t,e,r){"use strict";r.r(e);var n=r(0),o=new n.InjectionToken("JWT_OPTIONS"),s=function(t,e,r,n){var o,s=arguments.length,i=s<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(i=(s<3?o(i):s>3?o(e,r,i):o(e,r))||i);return s>3&&i&&Object.defineProperty(e,r,i),i},i=function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},a=function(t,e){return function(r,n){e(r,n,t)}},h=function(){function t(t){void 0===t&&(t=null),this.tokenGetter=t&&t.tokenGetter||function(){}}return t.prototype.urlBase64Decode=function(t){var e=t.replace(/-/g,"+").replace(/_/g,"/");switch(e.length%4){case 0:break;case 2:e+="==";break;case 3:e+="=";break;default:throw"Illegal base64url string!"}return this.b64DecodeUnicode(e)},t.prototype.b64decode=function(t){var e="";if((t=String(t).replace(/=+$/,"")).length%4==1)throw new Error("'atob' failed: The string to be decoded is not correctly encoded.");for(var r=0,n=void 0,o=void 0,s=0;o=t.charAt(s++);~o&&(n=r%4?64*n+o:o,r++%4)?e+=String.fromCharCode(255&n>>(-2*r&6)):0)o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(o);return e},t.prototype.b64DecodeUnicode=function(t){return decodeURIComponent(Array.prototype.map.call(this.b64decode(t),function(t){return"%"+("00"+t.charCodeAt(0).toString(16)).slice(-2)}).join(""))},t.prototype.decodeToken=function(t){if(void 0===t&&(t=this.tokenGetter()),null===t)return null;var e=t.split(".");if(3!==e.length)throw new Error("The inspected token doesn't appear to be a JWT. Check to make sure it has three parts and see https://jwt.io for more.");var r=this.urlBase64Decode(e[1]);if(!r)throw new Error("Cannot decode the token.");return JSON.parse(r)},t.prototype.getTokenExpirationDate=function(t){var e;if(void 0===t&&(t=this.tokenGetter()),!(e=this.decodeToken(t)).hasOwnProperty("exp"))return null;var r=new Date(0);return r.setUTCSeconds(e.exp),r},t.prototype.isTokenExpired=function(t,e){if(void 0===t&&(t=this.tokenGetter()),null===t||""===t)return!0;var r=this.getTokenExpirationDate(t);return e=e||0,null===r||!(r.valueOf()>(new Date).valueOf()+1e3*e)},t=s([Object(n.Injectable)(),a(0,Object(n.Inject)(o)),i("design:paramtypes",[Object])],t)}(),c=r(4),u=r(3),l=r(2),f=function(t,e,r,n){var o,s=arguments.length,i=s<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(i=(s<3?o(i):s>3?o(e,r,i):o(e,r))||i);return s>3&&i&&Object.defineProperty(e,r,i),i},p=function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},d=function(t,e){return function(r,n){e(r,n,t)}},m=function(){function t(t,e){this.jwtHelper=e,this.tokenGetter=t.tokenGetter,this.headerName=t.headerName||"Authorization",this.authScheme=t.authScheme||""===t.authScheme?t.authScheme:"Bearer ",this.whitelistedDomains=t.whitelistedDomains||[],this.blacklistedRoutes=t.blacklistedRoutes||[],this.throwNoTokenError=t.throwNoTokenError||!1,this.skipWhenExpired=t.skipWhenExpired}return t.prototype.isWhitelistedDomain=function(t){var e=Object(l.parse)(t.url,!1,!0);return null===e.host||this.whitelistedDomains.findIndex(function(t){return"string"==typeof t?t===e.host:t instanceof RegExp&&t.test(e.host)})>-1},t.prototype.isBlacklistedRoute=function(t){var e=t.url;return this.blacklistedRoutes.findIndex(function(t){return"string"==typeof t?t===e:t instanceof RegExp&&t.test(e)})>-1},t.prototype.handleInterception=function(t,e,r){var n,o=!1;if(!t&&this.throwNoTokenError)throw new Error("Could not get token from tokenGetter function.");return this.skipWhenExpired&&(o=!t||this.jwtHelper.isTokenExpired(t)),t&&o&&this.skipWhenExpired?e=e.clone():t&&this.isWhitelistedDomain(e)&&!this.isBlacklistedRoute(e)&&(e=e.clone({setHeaders:(n={},n[this.headerName]=""+this.authScheme+t,n)})),r.handle(e)},t.prototype.intercept=function(t,e){var r=this,n=this.tokenGetter();return n instanceof Promise?Object(c.from)(n).pipe(Object(u.mergeMap)(function(n){return r.handleInterception(n,t,e)})):this.handleInterception(n,t,e)},t=f([Object(n.Injectable)(),d(0,Object(n.Inject)(o)),p("design:paramtypes",[Object,h])],t)}(),v=r(1);r.d(e,"JwtModule",function(){return j}),r.d(e,"JwtInterceptor",function(){return m}),r.d(e,"JwtHelperService",function(){return h}),r.d(e,"JWT_OPTIONS",function(){return o});var y=function(t,e,r,n){var o,s=arguments.length,i=s<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,r):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(t,e,r,n);else for(var a=t.length-1;a>=0;a--)(o=t[a])&&(i=(s<3?o(i):s>3?o(e,r,i):o(e,r))||i);return s>3&&i&&Object.defineProperty(e,r,i),i},b=function(t,e){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,e)},g=function(t,e){return function(r,n){e(r,n,t)}},j=function(){function t(t){if(t)throw new Error("JwtModule is already loaded. It should only be imported in your application's main module.")}return e=t,t.forRoot=function(t){return{ngModule:e,providers:[{provide:v.HTTP_INTERCEPTORS,useClass:m,multi:!0},t.jwtOptionsProvider||{provide:o,useValue:t.config},h]}},t=e=y([Object(n.NgModule)(),g(0,Object(n.Optional)()),g(0,Object(n.SkipSelf)()),b("design:paramtypes",[t])],t);var e}()},function(t,e,r){"use strict";var n=function(t){switch(typeof t){case"string":return t;case"boolean":return t?"true":"false";case"number":return isFinite(t)?t:"";default:return""}};t.exports=function(t,e,r,a){return e=e||"&",r=r||"=",null===t&&(t=void 0),"object"==typeof t?s(i(t),function(i){var a=encodeURIComponent(n(i))+r;return o(t[i])?s(t[i],function(t){return a+encodeURIComponent(n(t))}).join(e):a+encodeURIComponent(n(t[i]))}).join(e):a?encodeURIComponent(n(a))+r+encodeURIComponent(n(t)):""};var o=Array.isArray||function(t){return"[object Array]"===Object.prototype.toString.call(t)};function s(t,e){if(t.map)return t.map(e);for(var r=[],n=0;n<t.length;n++)r.push(e(t[n],n));return r}var i=Object.keys||function(t){var e=[];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.push(r);return e}},function(t,e,r){"use strict";function n(t,e){return Object.prototype.hasOwnProperty.call(t,e)}t.exports=function(t,e,r,s){e=e||"&",r=r||"=";var i={};if("string"!=typeof t||0===t.length)return i;var a=/\+/g;t=t.split(e);var h=1e3;s&&"number"==typeof s.maxKeys&&(h=s.maxKeys);var c=t.length;h>0&&c>h&&(c=h);for(var u=0;u<c;++u){var l,f,p,d,m=t[u].replace(a,"%20"),v=m.indexOf(r);v>=0?(l=m.substr(0,v),f=m.substr(v+1)):(l=m,f=""),p=decodeURIComponent(l),d=decodeURIComponent(f),n(i,p)?o(i[p])?i[p].push(d):i[p]=[i[p],d]:i[p]=d}return i};var o=Array.isArray||function(t){return"[object Array]"===Object.prototype.toString.call(t)}},function(t,e,r){"use strict";e.decode=e.parse=r(7),e.encode=e.stringify=r(6)},function(t,e,r){"use strict";t.exports={isString:function(t){return"string"==typeof t},isObject:function(t){return"object"==typeof t&&null!==t},isNull:function(t){return null===t},isNullOrUndefined:function(t){return null==t}}},function(t,e){var r;r=function(){return this}();try{r=r||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(r=window)}t.exports=r},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e,r){(function(t,n){var o;/*! https://mths.be/punycode v1.4.1 by @mathias */!function(s){"object"==typeof e&&e&&e.nodeType,"object"==typeof t&&t&&t.nodeType;var i="object"==typeof n&&n;i.global!==i&&i.window!==i&&i.self;var a,h=2147483647,c=36,u=1,l=26,f=38,p=700,d=72,m=128,v="-",y=/^xn--/,b=/[^\x20-\x7E]/,g=/[\x2E\u3002\uFF0E\uFF61]/g,j={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},O=c-u,x=Math.floor,w=String.fromCharCode;function k(t){throw new RangeError(j[t])}function R(t,e){for(var r=t.length,n=[];r--;)n[r]=e(t[r]);return n}function I(t,e){var r=t.split("@"),n="";return r.length>1&&(n=r[0]+"@",t=r[1]),n+R((t=t.replace(g,".")).split("."),e).join(".")}function C(t){for(var e,r,n=[],o=0,s=t.length;o<s;)(e=t.charCodeAt(o++))>=55296&&e<=56319&&o<s?56320==(64512&(r=t.charCodeAt(o++)))?n.push(((1023&e)<<10)+(1023&r)+65536):(n.push(e),o--):n.push(e);return n}function A(t){return R(t,function(t){var e="";return t>65535&&(e+=w((t-=65536)>>>10&1023|55296),t=56320|1023&t),e+=w(t)}).join("")}function q(t,e){return t+22+75*(t<26)-((0!=e)<<5)}function E(t,e,r){var n=0;for(t=r?x(t/p):t>>1,t+=x(t/e);t>O*l>>1;n+=c)t=x(t/O);return x(n+(O+1)*t/(t+f))}function S(t){var e,r,n,o,s,i,a,f,p,y,b,g=[],j=t.length,O=0,w=m,R=d;for((r=t.lastIndexOf(v))<0&&(r=0),n=0;n<r;++n)t.charCodeAt(n)>=128&&k("not-basic"),g.push(t.charCodeAt(n));for(o=r>0?r+1:0;o<j;){for(s=O,i=1,a=c;o>=j&&k("invalid-input"),((f=(b=t.charCodeAt(o++))-48<10?b-22:b-65<26?b-65:b-97<26?b-97:c)>=c||f>x((h-O)/i))&&k("overflow"),O+=f*i,!(f<(p=a<=R?u:a>=R+l?l:a-R));a+=c)i>x(h/(y=c-p))&&k("overflow"),i*=y;R=E(O-s,e=g.length+1,0==s),x(O/e)>h-w&&k("overflow"),w+=x(O/e),O%=e,g.splice(O++,0,w)}return A(g)}function T(t){var e,r,n,o,s,i,a,f,p,y,b,g,j,O,R,I=[];for(g=(t=C(t)).length,e=m,r=0,s=d,i=0;i<g;++i)(b=t[i])<128&&I.push(w(b));for(n=o=I.length,o&&I.push(v);n<g;){for(a=h,i=0;i<g;++i)(b=t[i])>=e&&b<a&&(a=b);for(a-e>x((h-r)/(j=n+1))&&k("overflow"),r+=(a-e)*j,e=a,i=0;i<g;++i)if((b=t[i])<e&&++r>h&&k("overflow"),b==e){for(f=r,p=c;!(f<(y=p<=s?u:p>=s+l?l:p-s));p+=c)R=f-y,O=c-y,I.push(w(q(y+R%O,0))),f=x(R/O);I.push(w(q(f,0))),s=E(r,j,n==o),r=0,++n}++r,++e}return I.join("")}a={version:"1.4.1",ucs2:{decode:C,encode:A},decode:S,encode:T,toASCII:function(t){return I(t,function(t){return b.test(t)?"xn--"+T(t):t})},toUnicode:function(t){return I(t,function(t){return y.test(t)?S(t.slice(4).toLowerCase()):t})}},void 0===(o=function(){return a}.call(e,r,e,t))||(t.exports=o)}()}).call(this,r(11)(t),r(10))}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,